// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :exec
insert into refresh_tokens (token, user_id, expires_at)
values ($1, $2, $3)
`

type CreateRefreshTokenParams struct {
	Token     string    `json:"token"`
	UserID    uuid.UUID `json:"user_id"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, createRefreshToken, arg.Token, arg.UserID, arg.ExpiresAt)
	return err
}

const getRefreshToken = `-- name: GetRefreshToken :one
select token, user_id, expires_at, revoked_at, created_at, updated_at from refresh_tokens where token = $1
`

func (q *Queries) GetRefreshToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateRevokedAt = `-- name: UpdateRevokedAt :exec
update refresh_tokens
set revoked_at = $2, updated_at = $3
where token = $1
`

type UpdateRevokedAtParams struct {
	Token     string       `json:"token"`
	RevokedAt sql.NullTime `json:"revoked_at"`
	UpdatedAt time.Time    `json:"updated_at"`
}

func (q *Queries) UpdateRevokedAt(ctx context.Context, arg UpdateRevokedAtParams) error {
	_, err := q.db.ExecContext(ctx, updateRevokedAt, arg.Token, arg.RevokedAt, arg.UpdatedAt)
	return err
}
